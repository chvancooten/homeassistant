- platform: time_date
  display_options:
    - 'time'
    - 'date'

- platform: dsmr
  port: /dev/ttyUSB0
  dsmr_version: 5

# - platform: miflora
#   mac: C4:7C:8D:6A:6E:1F
#   name: Dieffenbachia
#   median: 1
# - platform: miflora
#   mac: C4:7C:8D:6A:84:01
#   name: Backup Miflora
#   median: 1

- platform: waqi
  token: !secret aqitoken
  locations:
  - 'utrecht'
  stations:
  - 'de Jongweg, Utrecht'

# - platform: rest
#   name: Next alarm
#   resource: http://192.168.1.203:8443/setup/assistant/alarms
#   value_template: >
#     {% set alarms = value_json.alarm|sort(attribute='fire_time') %}
#     {% if alarms[0] is defined %}
#       {{ alarms[0].fire_time }}
#     {% else %}
#       None
#     {% endif %}

- platform: command_line
  command: "curl --insecure --header \"cast-local-authorization-token: {{ state_attr('input_text.google_tokens', 'token_HomeCas junior') }}\" https://192.168.1.203:8443/setup/assistant/alarms"
  name: Next Alarm
  value_template: >
    {% set alarms = value_json.alarm|sort(attribute='fire_time') %}
    {% if alarms[0] is defined %}
      {{ alarms[0].fire_time }}
    {% else %}
      None
    {% endif %}

- platform: systemmonitor
  resources:
  - type: disk_use_percent
    arg: /config
  - type: disk_use_percent
    arg: /data
  - type: memory_use_percent
  - type: load_5m
  - type: processor_use
  - type: last_boot
  
- platform: waze_travel_time
  origin: !secret homeaddr
  destination: !secret workaddr
  region: 'EU'
  name: "Work commute"
- platform: waze_travel_time
  origin: !secret workaddr
  destination: !secret homeaddr
  region: 'EU'
  name: "Home commute"

- platform: darksky
  api_key: !secret dark_sky_api_key
  monitored_conditions:
    - cloud_cover

- platform: template
  sensors:
    next_alarm_human:
      value_template: >
        {% if states('sensor.next_alarm') == "None" %}
          No alarm set
        {% elif states('sensor.next_alarm') == "unavailable" or states('sensor.next_alarm') == "unknown" %}
          Google Home unavailable
        {% else %}
          {{ (states('sensor.next_alarm')|int/1000)|timestamp_custom('%A %H:%M') }}
        {% endif %}
      friendly_name: Next alarm
      icon_template: 'mdi:alarm'

    totalpowerconsumption:
      value_template: '{{ ( states("sensor.energy_consumption_tarif_1")|float ) + ( states("sensor.energy_consumption_tarif_2")|float )|round(2) }}'
      friendly_name: Total power consumption
      unit_of_measurement: 'kWh'
      icon_template: 'mdi:power-socket-eu'
      
    buienradar_temperature:
      value_template: '{{ states.weather.buienradar.attributes.temperature }}'
      device_class: temperature
      friendly_name: Temperature outside
      unit_of_measurement: '°C'
      
    buienradar_pressure:
      value_template: '{{ states.weather.buienradar.attributes.pressure }}'
      device_class: pressure
      friendly_name: Pressure outside
      unit_of_measurement: 'hPa'
      
    buienradar_humidity:
      value_template: '{{ states.weather.buienradar.attributes.humidity }}'
      device_class: humidity
      friendly_name: Humidity outside
      unit_of_measurement: '%'

    sun_elevation:
      friendly_name: Sun elevation
      icon_template: mdi:white-balance-sunny
      unit_of_measurement: "°"
      value_template: "{{ state_attr('sun.sun', 'elevation')|float|round(1) }}"

    sun_elevation_corrected:
      icon_template: mdi:white-balance-sunny
      friendly_name: Sun elevation (corrected for cloud coverage)
      value_template: >-
        {% set maxDecrease = states('input_number.max_sun_elevation_decrease')|float / 100 %}
        {% set coverage = states('sensor.dark_sky_cloud_coverage')|float / 100 %}
        {% set elevation = state_attr('sun.sun', 'elevation')|float %}
        {{ "%.2f"|format(elevation - ((coverage * maxDecrease) * elevation)|abs) }}
      unit_of_measurement: "°"

    sun_direction:
      friendly_name: Sun direction
      icon_template: >-
        {% if as_timestamp(state_attr('sun.sun', 'next_noon')) - as_timestamp(state_attr('sun.sun', 'next_midnight')) < 0 %}
          mdi:weather-sunset-up
        {% else %}
          mdi:weather-sunset-down
        {% endif %}
      value_template: >-
        {% if as_timestamp(state_attr('sun.sun', 'next_noon')) - as_timestamp(state_attr('sun.sun', 'next_midnight')) < 0 %}
          Rising
        {% else %}
          Setting
        {% endif %}

    time_of_day:
      friendly_name: Time of day
      icon_template: mdi:calendar-clock
      value_template: >-
        {% if is_state('sensor.sun_direction', 'Rising') and states('sensor.sun_elevation_corrected')|float > states('input_number.day_threshold')|float %}
          Day
        {% elif is_state('sensor.sun_direction', 'Rising') and states('sensor.sun_elevation_corrected')|float > states('input_number.morning_threshold')|float %}
          Morning
        {% elif is_state('sensor.sun_direction', 'Rising') %}
          Night
        {% elif is_state('sensor.sun_direction', 'Setting') and states('sensor.sun_elevation_corrected')|float < states('input_number.evening_threshold')|float %}
          Evening
        {% elif is_state('sensor.sun_direction', 'Setting') and states('sensor.sun_elevation_corrected')|float < states('input_number.early_evening_threshold')|float %}
          Early evening
        {% elif is_state('sensor.sun_direction', 'Setting') and states('sensor.sun_elevation_corrected')|float < states('input_number.afternoon_threshold')|float %}
          Afternoon
        {% else %}
          Day
        {% endif %}