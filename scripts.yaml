### RANDOM
power_level:
  alias: Say power level
  sequence:
    - service: tts.google_say
      data_template:
        entity_id: "media_player.homecas"
        message: "It is probably a little bit over {{ (1000*(states('sensor.power_consumption')|float))|round }} Watts!"

### SCENES

#reset lights to currently selected scene
reset_scene:
  alias: Reset selected scene
  sequence:
    - service: scene.turn_on
      data_template:
        entity_id: scene.{{ states('input_select.scene') }}

#set scene based on time of day (for home arrivals and wakeup routines)
set_scene:
  alias: Set current scene
  sequence:
    - service: scene.turn_on
      data_template:
        entity_id: >
          {% if states('sensor.time_of_day') == "Evening" or states('sensor.time_of_day') == "Early Evening" %}
            scene.evening
          {% elif states('sensor.time_of_day') == "Day" or states('sensor.time_of_day') == "Afternoon" %}
            scene.day
          {% else %}
            scene.morning
          {% endif %}

### IR LEARNING
# learn_toggle_soundbar:
#   sequence:
#     - service: remote.learn_command
#       data:
#         entity_id: remote.rm_mini_3_remote
#         device: soundbar
#         command: power

# learn_nextsource_soundbar:
#   sequence:
#     - service: remote.learn_command
#       data:
#         entity_id: remote.rm_mini_3_remote
#         device: soundbar
#         command: source

# learn_volup_soundbar:
#   sequence:
#     - service: remote.learn_command
#       data:
#         entity_id: remote.rm_mini_3_remote
#         device: soundbar
#         command: volup

# learn_voldown_soundbar:
#   sequence:
#     - service: remote.learn_command
#       data:
#         entity_id: remote.rm_mini_3_remote
#         device: soundbar
#         command: voldown